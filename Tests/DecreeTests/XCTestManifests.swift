#if !canImport(ObjectiveC)
import XCTest

extension AuthenticationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AuthenticationTests = [
        ("testNoAuthentication", testNoAuthentication),
        ("testOptionalAuthentication", testOptionalAuthentication),
        ("testRequiredAuthencitation", testRequiredAuthencitation),
    ]
}

extension EmptyResultTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EmptyResultTests = [
        ("testGettingError", testGettingError),
    ]
}

extension FileTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FileTests = [
        ("testBinary", testBinary),
        ("testJSON", testJSON),
        ("testJSONObject", testJSONObject),
        ("testText", testText),
        ("testXML", testXML),
    ]
}

extension FormDataEncoderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FormDataEncoderTests = [
        ("testEncodeAll", testEncodeAll),
        ("testEncodeBool", testEncodeBool),
        ("testEncodeData", testEncodeData),
        ("testEncodeEmpty", testEncodeEmpty),
        ("testEncodeFile", testEncodeFile),
        ("testEncodeNone", testEncodeNone),
        ("testEncodeString", testEncodeString),
    ]
}

extension KeyValueEncoderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__KeyValueEncoderTests = [
        ("testEncodingObject", testEncodingObject),
    ]
}

extension RequestFlowTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RequestFlowTests = [
        ("testEmptyRequestFlow", testEmptyRequestFlow),
        ("testFormInOutRequestFlow", testFormInOutRequestFlow),
        ("testFormInRequestFlow", testFormInRequestFlow),
        ("testInOutRequestFlow", testInOutRequestFlow),
        ("testInRequestFlow", testInRequestFlow),
        ("testOutRequestFlow", testOutRequestFlow),
        ("testRedirectFlow", testRedirectFlow),
        ("testURLQueryInOutRequestFlow", testURLQueryInOutRequestFlow),
        ("testURLQueryInRequestFlow", testURLQueryInRequestFlow),
        ("testXMLInOutRequestFlow", testXMLInOutRequestFlow),
        ("testXMLInRequestFlow", testXMLInRequestFlow),
    ]
}

extension ResponseParsingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ResponseParsingTests = [
        ("testEmpty", testEmpty),
        ("testIgnoringBasicAndErrorResponses", testIgnoringBasicAndErrorResponses),
        ("testIn", testIn),
        ("testInOut", testInOut),
        ("testMinimalInOutRequest", testMinimalInOutRequest),
        ("testOut", testOut),
        ("testXMLOut", testXMLOut),
    ]
}

extension StatusCodeValidationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StatusCodeValidationTests = [
        ("testStatusCodeValidation", testStatusCodeValidation),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AuthenticationTests.__allTests__AuthenticationTests),
        testCase(EmptyResultTests.__allTests__EmptyResultTests),
        testCase(FileTests.__allTests__FileTests),
        testCase(FormDataEncoderTests.__allTests__FormDataEncoderTests),
        testCase(KeyValueEncoderTests.__allTests__KeyValueEncoderTests),
        testCase(RequestFlowTests.__allTests__RequestFlowTests),
        testCase(ResponseParsingTests.__allTests__ResponseParsingTests),
        testCase(StatusCodeValidationTests.__allTests__StatusCodeValidationTests),
    ]
}
#endif
